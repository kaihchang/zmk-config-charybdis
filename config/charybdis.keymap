#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/input_transform.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;

    flavor = "balanced";
    tapping-term-ms = <170>;
};

&sk {
    quick-release;

    // ignore-modifiers;
};

&sl { release-after-ms = <1500>; };

/ {
    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&vtrackball>;

    snipe {
            layers = <Button>;
            input-processors = <&xy_scaler 1 3>;
        };

        scroll {
            layers = <Nav>;
            input-processors = <&xy_invert (INPUT_TRANSFORM_Y_INVERT)>, <&xy_scaler 1 3>, <&x_scaler 0 1>, <&mouse_to_wheel_mapper>;
        };
    };

    xy_scaler: xy_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_X>, <INPUT_REL_Y>;
    };

    x_scaler: x_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_X>;
    };

    y_scaler: y_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_Y>;
    };

    xy_invert: xy_invert {
        compatible = "zmk,input-processor-transform";
        #input-processor-cells = <1>;
        type = <INPUT_EV_REL>;
        x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
        y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
    };

    mouse_to_wheel_mapper: mouse_to_wheel_mapper {
        compatible = "zmk,input-processor-code-mapper";
        #input-processor-cells = <0>;
        type = <INPUT_EV_REL>;
        map = <INPUT_REL_X INPUT_REL_MISC>, <INPUT_REL_Y INPUT_REL_WHEEL>;
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 0>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp TAB>;
        };

        combo_return {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp RETURN>;
        };

        combo_manager {
            timeout-ms = <50>;
            key-positions = <0 2>;
            bindings = <&kp LS(LC(ESCAPE))>;
        };

        combo_highlight {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&highlight_macro>;
        };

        combo_toggle1 {
            bindings = <&tog 1>;
            key-positions = <30 31>;
            layers = <0 1 2 3>;
        };

        combo_toggle3 {
            bindings = <&tog 3>;
            key-positions = <32 33>;
            layers = <0 1 2 3>;
        };

        combo_backspace_1 {
            bindings = <&kp BACKSPACE>;
            key-positions = <11 12>;
            timeout-ms = <30>;
            layers = <0 1 2 3>;
        };

        combo_delete_2 {
            bindings = <&kp DELETE>;
            key-positions = <12 13>;
            timeout-ms = <30>;
            layers = <0 1 2 3>;
        };

        combo_backspace_2 {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            layers = <0 1 2 3>;
            timeout-ms = <30>;
        };

        combo_delete_1 {
            bindings = <&kp DELETE>;
            key-positions = <17 18>;
            layers = <0 1 2 3>;
            timeout-ms = <30>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0 1 2 3>;
        };
    };

    macros {
        cnq_macro: cnq_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LBKT &kp GRAVE &kp RIGHT_BRACKET &kp LEFT_ARROW &kp LEFT_ARROW &kp DOWN_ARROW &kp DOWN_ARROW>;
            label = "CNQ_MACRO";
        };

        highlight_macro: highlight_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "HIGHLIGHT_MACRO";
        };
    };

    behaviors {
        holdtap_comma: holdtap_comma {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_COMMA";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <29>;
            flavor = "hold-preferred";
        };

        holdtap_period: holdtap_period {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_PERIOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <30>;
        };

        holdtap_equal_enter: holdtap_equal_enter {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_EQUAL_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "BASE";
            bindings = <
                &kp Q           &kp W           &kp E               &kp R           &kp T        &kp Y  &kp U        &kp I                               &kp O                              &kp P
                &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &kp F           &kp G        &kp H  &kp J        &mt RIGHT_CONTROL K                 &mt RIGHT_ALT L                    &mt RIGHT_GUI SQT
                &kp Z           &kp X           &kp C               &kp V           &kp B        &kp N  &kp M        &holdtap_comma LA(LC(COMMA)) COMMA  &holdtap_period LG(PERIOD) PERIOD  &kp FSLH
                                                &mo 2               &kp LEFT_SHIFT  &lt 1 ENTER  &mo 2  &lt 3 SPACE
            >;
        };

        num_layer {
            display-name = "NUM";
            bindings = <
                &kp C_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &mkp MB4         &mkp MB5           &kp BACKSPACE  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &holdtap_equal_enter ENTER EQUAL
                &sk LEFT_META     &sk LEFT_ALT       &sk LEFT_CONTROL  &sk LEFT_SHIFT   &to 5              &kp MINUS      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTERISK
                &kp LA(TAB)       &kp LA(F4)         &kp LS(LG(S))     &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &kp PLUS       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp FSLH
                                                     &to 0             &kp LG(TAB)      &trans              &kp NUMBER_0  &kp DOT
            >;
        };

        symbol_layer {
            display-name = "SYMBOL";
            bindings = <
                &kp GRAVE        &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS   &kp LEFT_BRACE   &kp LC(EXCLAMATION)  &kp TILDE  &kp PIPE        &kp AMPERSAND  &cnq_macro        &kp EQUAL
                &kp EXCLAMATION  &kp AT_SIGN        &kp HASH               &kp DOLLAR       &kp PERCENT          &kp MINUS  &kp LESS_THAN   &kp CARET      &kp GREATER_THAN  &kp ASTERISK
                &kp BACKSLASH    &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp LS(LC(SLASH))    &kp PLUS   &kp UNDERSCORE  &kp SEMICOLON  &kp COLON         &kp QUESTION
                                                    &to 0                  &trans           &trans               &trans     &trans
            >;
        };

        navi_layer {
            display-name = "NAVI";
            bindings = <
                &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &kp F11  &kp F12  &mkp MB4         &mkp MB5           &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_PLAY_PAUSE
                &kp F6      &kp F7      &kp F8      &kp F9   &kp F10  &kp HOME         &kp LEFT           &kp UP           &kp RIGHT          &kp END
                &kp F1      &kp F2      &kp F3      &kp F4   &kp F5   &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &kp DOWN         &kp PAGE_UP        &kp PAGE_DOWN
                                        &to 0       &trans   &trans   &trans           &trans
            >;
        };

        mouse_layer {
            display-name = "MOUSE";
            bindings = <
                &bootloader &none       &none       &none       &none     &none     &none       &none      &none       &bootloader
                &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHIFT  &none     &none     &kp RSHIFT  &kp RCTRL  &kp RALT    &kp RGUI
                &none       &none       &none       &none       &none     &none     &none       &none      &none       &none
                                        &mkp MB2    &mkp MB1    &mkp MB3  &mkp MB3  &mkp MB1
            >;
        };

        game_layer {
            display-name = "GAME";
            bindings = <
                &kp R  &kp Q  &kp C    &kp E           &kp T      &kp T   &kp I     &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &to 0
                &kp F  &kp A  &kp W    &kp D           &kp G      &kp G   &kp LEFT  &kp UP           &kp RIGHT          &kp F12
                &kp Z  &kp X  &kp S    &kp V           &kp B      &trans  &trans    &kp DOWN         &trans             &kp LA(TAB)
                              &kp TAB  &kp LEFT_SHIFT  &kp SPACE  &kp Z   &kp X
            >;
        };
    };
};